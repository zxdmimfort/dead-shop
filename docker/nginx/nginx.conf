worker_processes 1;
user nobody nogroup;
error_log /var/log/nginx/error.log crit;
pid /var/run/nginx.pid;

events {
    worker_connections 1024; # increase if you have lots of clients
    accept_mutex off; # set to 'on' if nginx worker_processes > 1
    use epoll; # The effective method, used on Linux 2.6+, optmized to serve many clients with each thread.
}

http {
    # types
    include mime.types; # fallback in case we can't determine a type
    default_type application/octet-stream;

    # Caches
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Keep alive settings
    keepalive_timeout 30s; # Timeout for keep-alive connections. Server will close connections after this time.
    keepalive_requests 1000; # Number of requests a client can make over the keep-alive connection.

    # Proxy settings
    proxy_buffers 8 64k;
    proxy_intercept_errors on;
    proxy_connect_timeout 1m;
    proxy_read_timeout 1m;
    proxy_send_timeout 1m;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;
    proxy_redirect off;

    # Compression
    gzip on;
    gzip_disable "msie6";
    gzip_comp_level 6;
    gzip_min_length 256;
    gzip_buffers 16 8k;
    gzip_proxied any;
    gzip_types
    application/atom+xml
    application/geo+json
    application/javascript
    application/x-javascript
    application/json
    application/ld+json
    application/manifest+json
    application/rdf+xml
    application/rss+xml
    application/xhtml+xml
    application/xml
    font/eot
    font/otf
    font/ttf
    image/svg+xml
    text/css
    text/javascript
    text/plain
    text/xml;

    # Client timeouts
    client_body_timeout 10s; # Send the client a "request timed out" if the body is not loaded by this time.
    send_timeout 5s; # If the client stops reading data, free up the stale client connection after this much time.
    reset_timedout_connection on; # Allow the server to close the connection after a client stops responding.

    # Other
    charset utf-8;
    sendfile on; # Sendfile copies data between one FD and other from within the kernel.
    client_max_body_size 10m;
    access_log /var/log/nginx/access.log combined;

    map $sent_http_content_type $expires {
        "text/html" epoch;
        "text/html; charset=utf-8" epoch;
        default off;
    }

    upstream backend_server {
        server app:8000 fail_timeout=0;
    }

    server {
        listen 80;
        server_name scvready.online;
        server_tokens off;
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name scvready.online;
        server_tokens off;
        
        ssl_certificate /etc/letsencrypt/live/scvready.online/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/scvready.online/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        location / {
            proxy_pass http://backend_server$uri$is_args$args;
            proxy_set_header    Host                $http_host;
            proxy_set_header    X-Real-IP           $remote_addr;
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
        }

        location ~ ^/(static/|media/) {
            root /app;
            expires 365d;
            add_header Cache-Control "public, max-age=31536000";
            add_header Access-Control-Allow-Origin *;
            access_log off;
            log_not_found off;
        }
    }
}